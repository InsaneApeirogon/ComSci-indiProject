This file will be for my current algorithms

Initially
Create Booleans: selectingUnit, firingUnit
Create Ints: currentTurn, numberPlayer, artilleryRange, tankRange, infantryRange, artilleryMove, tankMove, infantryMove, lastUnit
Create Strings: Terrain [mapsize] [mapsize]
Create Buttons: endTurn, Fire
Create other Array: unitArray [], playerArray []

Create Player class:
Class contains:
Ints: playerUnitCount, playerTurn
Strings:
Booleans: playerLoss
Methods: 

Create Unit Class:
Class contains:
Ints: unitFaction arrayLocX, arrayLocY, unitActions
Strings: unitType
Booleans: unitAlive, unitForest
Methods: unitSelect, unitMove, unitFire, tankMove, tankFire, infantryMove, infantryFire, artilleryMove, artilleryFire

//  Jframe and Jpanel stuff, work out
//  Mouselistener stuff, work out

Methods:
drawTerrain:
  - loop i for arraylength
  -   - loop e for arraywidth
  -   -   - at i,e if String == forest, paint forest
  -   -   - at i,e if String == plains, paint plains
  
drawUnits:
  - loop i for unitarray
  -   - if unit i = alive and unitForest = False
  -   -   - if case
  -   -   -   - if tank, check unitFaction, paint tank (faction) at arrayLoc
  -   -   -   - if infantry, check unitFaction, paint infantry (faction) at arrayLoc
  -   -   -   - if artillery, check unitFaction, paint artillery (faction) at arrayLoc

paintSprites:
  -get required arrayLoc and sprite type
  -if spritetype = moveSquare
  -   -if arrayLoc = forest
  -   -   -if unitType (lastUnit) = infantry
  -   -   -   -paint moveSquare
  -   -   -else, do nothing
  -   -if arrayLoc = plains
  -   -   -paint moveSquare

//Units methods list

unitSelect:
  -get mousecoords
  -Find corresponding arrayLoc
  -if firingUnit = false
  -   -if selectedUnit = false
  -   -   -  -loop i for unitArrayLength
  -   -   -   -check unit for matching arrayLoc
  -   -   -if unit found
  -   -   -   -if unitFaction =\= currentTurn, return error, break
  -   -   -   -if case
  -   -   -   -   -if infantry 
  -   -   -   -   -   -paint fireSquare sprites  centered on arrayLoc
  -   -   -   -   -if tank
  -   -   -   -   -   -paint moveSquare sprites tankMove*tankMove centered on arrayLoc
  -   -   -   -   -   -paint fireSquare sprites tankRange*tankRange centered on arrayLoc
  -   -   -   -   -if artillery
  -   -   -   -   -   -paint fireSquares artilleryRange*artilleryRange centered on arrayLoc
  -   -   -   -   -   -paint moveSquare sprites artilleryMove*artilleryMove
  -   -   -   -set selectUnit = true
  -   -   -   -lastUnit = i
  -   -   -if unit not found, return error
  -   -if selectedUnit = true
  -   -   -get unitType unitArray [lastUnit]
  -   -   -loop i for unitArrayLength
  -   -   -   -check unit for matching arrayLoc
  -   -   -if unit found, return error
  -   -   -   -else
  -   -   -   -   -if case
  -   -   -   -   -   -if artillery, run artilleryMove
  -   -   -   -   -   -if tank, run tankMove
  -   -   -   -   -   -if infantry, run infantryMove
  -   -if firingUnit = true
  -   -   -get unitType unitArray [lastUnit]
  -   -   -if case
  -   -   -   -if artillery, run artilleryFire
  -   -   -   -if tank, run tankFire
  -   -   -   -if infantry, run infantryFire
  
infantryMove:
  -get mouseCoords
  -get corresponding arrayLoc
  -loop i for unitArrayLength
  -   -check units for corresponding arrayLoc
  -if unit found, return error
  -else
  -   -if arrayLoc (lastUnit) [i+-1] [e] or [i] [e-+1] = arrayLoc (mouse) [i] [e]
  -   -   -run unitMove
  -   -else, return error
  
unitMove:
 - 
  -if arrayLoc (lastUnit) [i+-1] [e] or [i] [e-+1] = arrayLoc (mouse) [i] [e]
  -   -if lastUnit (unitTurn) => 1
  -   -   -check forest, unit
  -   -   -arrayLoc (lastUnit) = arrayLoc (mouse)
  -   -   -set lastUnit (unitTurn) = unitTurn - 1
  -   -else, retrun error
  -else, if arrayLoc (lastUnit) [i+-2] or [e+-2] = arrayLoc (mouse)
  -   -if lastUnit (unitTurn) = > 2
  -   -   -check forest, unit
  -   -   -arrayLoc (lastUnit) = arrayLoc (lastUnit i+-1 or e+-1)
  -   -   -wait 40 miliseconds
  -   -   -arrayLoc (lastUnit) = arrayLoc (mouse)
  -   -   -set lastUnit (unitTurn) = unitTurn - 2
  -   -else, return error
  -else, if arrayLoc (lastUnit) [i+-1] [e+-1] = arrayLoc (mouse)
  -   - if lastUnit (unitTurn) => 2
  -   -   - check forest, units
  -   -   - move arrayLoc [i+-] or [e+-1]
  -   -   - wait 40 miliseconds
  -   -   - ArrayLoc (lastUnit) = arrayLoc (mouse)
  -   -   -set lastUnit (unitTurn) = unitTurn - 2
  -   -else, return error
  
tankMove:
  -get mouseCoords
  -get corresponding arrayLoc
  -if arrayLoc (lastUnit) = arrayLoc (mouse) [i+-2] [e], [i] [e+-2], [i+-1] [e], [i] [e+-1], [i+-1] [e+-1]
  -   -run unitMove
  

artilleryMove:
  -get mouseCoords
  -get corresponding arrayLoc
  -loop i for unitArrayLength
  -   -check units for corresponding arrayLoc
  -if unit found, return error
  -else
  -   -if arrayLoc (lastUnit) [i+-1] [e] or [i] [e-+1] = arrayLoc (mouse) [i] [e]
  -   -   -run unitMove
  -   -else, return error

unitFire:
  - if lastUnit unitTurn => 2
  -   -set lastUnit (unitTurn) = unitTurn - 2
  -   -get mouseCoords
  -   -find correspondinbg arrayLoc
  -   -if lastUnit arrayLoc = mouse arrayLoc, return error
  -   -else
  -   -   -get lastUnit (unitType)
  -   -   -if case:
  -   -   -   -if tank, run tankFire
  -   -   -   -if infantry, run infantyFire
  -   -   -   -if artillery, run artilleryFire
  -else, return error
  
infantryFire:
  -if lastunit arrayLoc = mouse arrayLoc [i+-1] or [e+-1]
  -   -loop i for unitArrayLength
  -   -   -check units for corresponding arrayLoc
  -   -if unit found, set unitAlive at mouse arrayLoc to false
  -   -else return error
  
tankFire:
  -if lastunit arrayLoc = mouse arrayLoc [i+-1] or [e+-1]
  -   -loop i for unitArrayLength
  -   -   -check units for corresponding arrayLoc
  -   -if unit found, set unitAlive at mouse arrayLoc to false
  -   -else return error
  
artilleryFire:
  - if lastUnit arrayLoc = mouse [i+-4] or [e+-4]
  -   -loop i for unitArrayLength
  -   -   -check units for corresponding arrayLoc
  -   -if unit found, set unitAlive at mouse arrayLoc to false
  -   -else return error
  - loop a for 0-3 inclusive
  -   -loop b for 0-3 inclusive
  -   -   -if lastUnit arrayLoc = mouse [i+-a] [e+-b]
  -   -   -   -loop i for unitArrayLength
  -   -   -   -   -check units for corresponding arrayLoc
  -   -   -   -if unit found, set unitAlive at mouse arrayLoc to false
  -   -   -   -else return error


//Player methods list

//Main
set currentTurn = 1
set infantryMove, infantryFire, tankFire, artilleryMove = 1
set artilleryFire = 4
set tankMove = 2
set PlayerUnitCount (all) = number of units on their side
set playerLoss (all) = false


When mouse clicked
  -if inside playing field
  -   -Run unitSelect

When fire button pressed
  -set firingUnit = true

When endTurn button pressed
  - Set currentTurn = currentTurn + 1

  - If currentTurn > numberPlayer, set currentTurn = 1
  - loop i for playerArray
  -   -if currentTurn = playerArray [i] and playerArray [i] playerLoss = true
  -   -   -set currentTurn = currentTurn + 1
  
When PlayerunitCount (player) = 0
  -Set playerLoss (player) = true
  -Set //local variable, e =0// e = e +1
  -if e = numberPlayer - 1
  -   -loop i for playerArray, if playerArray [i] playerLoss = false, display Victory for player [i] 
  
